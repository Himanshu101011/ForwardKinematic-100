% MATLAB Code: Forward Kinematics for an n-Link Manipulator
function forward_kinematics_DH(Parameters, joint_types)

    % Number of links
    n = size(Parameters, 1);

    % Identity matrix as the initial transformation
    T = eye(4);

    % Store joint positions for visualization
    joint_positions = zeros(n+1, 3);  % Including base

    % Initialize figure for visualization
    figure;
    hold on;

    grid on;
    xlabel('X-axis'); ylabel('Y-axis'); zlabel('Z-axis');
    title('Forward Kinematics - n-Link Manipulator');

    view(3);  % Set 3D perspective

    % Loop through each joint and calculate transformations
    for i = 1:n
        % Extract D-H parameters
        theta = Parameters(i, 1);  % Joint angle (degrees)
        d = Parameters(i, 2);      % Joint offset (meters)
        a = Parameters(i, 3);      % Link length (meters)
        alpha = Parameters(i, 4);  % Link twist (degrees)

        % Convert angles from degrees to radians
        theta = deg2rad(theta);
        alpha = deg2rad(alpha);

        % Adjust based on joint type
        if joint_types{i} == 'P'
            d = Parameters(i, 2);  % d is variable
        elseif joint_types{i} == 'R'
            theta = theta;  % Î¸ is variable
        else
            error('Invalid joint type! Use "R" for revolute or "P" for prismatic.');
        end

        % Compute the transformation matrix using D-H parameters
        A_i = [cos(theta), -sin(theta)*cos(alpha),  sin(theta)*sin(alpha), a*cos(theta);
               sin(theta),  cos(theta)*cos(alpha), -cos(theta)*sin(alpha), a*sin(theta);
               0,           sin(alpha),            cos(alpha),            d;
               0,           0,                     0,                     1];

        % Update the cumulative transformation matrix
        T = T * A_i;

        % Store joint position
        joint_positions(i+1, :) = T(1:3, 4)';

        % Plot the link
        plot3([joint_positions(i, 1), joint_positions(i+1, 1)], ...
              [joint_positions(i, 2), joint_positions(i+1, 2)], ...
              [joint_positions(i, 3), joint_positions(i+1, 3)], 'bo-', 'LineWidth', 2);
    end

    % Plot all joint positions
    scatter3(joint_positions(:, 1), joint_positions(:, 2), joint_positions(:, 3), 'r', 'filled');

    % Set axis properties
    axis equal;
    hold off;

    % Display the final transformation matrix
    disp('Final Transformation Matrix (End-Effector Position & Orientation):');
    disp(T);
end
